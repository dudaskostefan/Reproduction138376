// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package bert.actions;

import com.mendix.core.Core;
import com.mendix.mlkit.MLKit;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import java.io.InputStream;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Map;
import java.util.List;
import java.util.ArrayList;
import java.util.stream.IntStream;

public class KB_Preprocessor extends CustomJavaAction<IMendixObject>
{
	public KB_Preprocessor(IContext context)
	{
		super(context);
	}

	@java.lang.Override
	public IMendixObject executeAction() throws Exception
	{
		// BEGIN USER CODE

        int numSentences = 300;
        long[][] inputIdsArray = new long[numSentences][MAX_SEQ_LEN];
        long[][] inputMaskArray = new long[numSentences][MAX_SEQ_LEN];
        long[][] tokenTypeIdsArray = new long[numSentences][MAX_SEQ_LEN];

        long startArrayInitialization = System.currentTimeMillis();
        for (int i = 0; i < numSentences; i++) {
            for (int j = 0; j < MAX_SEQ_LEN; j++) {
                if (j < 32) {
                    inputIdsArray[i][j] = 0;
                    inputMaskArray[i][j] = 0;
                    tokenTypeIdsArray[i][j] = 0;
                } else {
                    inputIdsArray[i][j] = 0;
                    inputMaskArray[i][j] = 0;
                    tokenTypeIdsArray[i][j] = 0;
                }
            }
        }

        InputStream inputIdsIs = MLKit.toInputStream(inputIdsArray);
        InputStream inputMaskIs = MLKit.toInputStream(inputMaskArray);
        InputStream tokenTypeIdsIs = MLKit.toInputStream(tokenTypeIdsArray);

        final IMendixObject outputObject = Core.instantiate(getContext(), "BERT.ML_Input_Entity_Multibatch_sequence_tokenizer");

        outputObject.setValue(getContext(), "Attention_mask", MLKit.toBase64(inputMaskIs)); // Store the Base64 encoded input masks
        outputObject.setValue(getContext(), "Input_ids", MLKit.toBase64(inputIdsIs));
        outputObject.setValue(getContext(), "Token_type_ids", MLKit.toBase64(tokenTypeIdsIs));

        return outputObject;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "KB_Preprocessor";
	}

	// BEGIN EXTRA CODE
    private static final boolean DO_LOWER_CASE = true;
    private static final int MAX_SEQ_LEN = 32;
	// END EXTRA CODE
}
